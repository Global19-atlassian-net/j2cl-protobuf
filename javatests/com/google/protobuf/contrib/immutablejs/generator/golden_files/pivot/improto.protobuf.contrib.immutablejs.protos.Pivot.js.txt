
/**
 * @fileoverview
 * @suppress {lateProvide}
 *
 * Generated code DO NOT EDIT
 * Generated by
 * //java/com/google/protobuf/contrib/immutablejs/generator:ImmutableJspbCompiler
 */
goog.module('improto.protobuf.contrib.immutablejs.protos.Pivot');

const proto_im_InternalMessage = goog.require('proto.im.internal.InternalMessage');
const proto_im_Message = goog.require('proto.im.Message');

/**
 *
 * @struct
 * @final
 * @extends {proto_im_InternalMessage<!Pivot, !Pivot.Builder>}
 */
class Pivot extends proto_im_InternalMessage {
  /**
   * Parses the json as a message of type Pivot.
   * @param {string} json
   * @return {!Pivot}
   */
  static parse(json) {
    return proto_im_InternalMessage.parseBase(Pivot, json);
  }

  /**
   * Returns a builder for this message.
   * @param {!Pivot=} message
   * @return {!Pivot.Builder}
   */
  static newBuilder(message = Pivot.getDefaultInstance()) {
    return new Pivot.Builder(message);
  }

  /**
   * Returns the default instance for this message.
   * @return {!Pivot}
   */
  static getDefaultInstance() {
    return proto_im_InternalMessage.getDefaultInstanceForMessage(Pivot);
  }

  /**
   * @param {!Array<?>} data The array holding protobuf data.
   * @private
   */
  constructor(data) {
    super(data, 2, 'my_message_id');
  }

  /**
   * Constructs a builder initialized with the current message.
   * @return {!Pivot.Builder}
   * @override
   */
  toBuilder() {
    return new Pivot.Builder(this);
  }


  /**
   * @return {boolean}
   */
  hasPayload() {
    return this.internal_hasField(1);
  }

  /**
   *
   * @return {!string}
   */
  getPayload() {
    return this.internal_getStringField(1);
  }
}


// Extensions start

// Extensions end

/**
 * @override
 * @struct
 * @final
 * @extends {proto_im_InternalMessage.Builder<!Pivot, !Pivot.Builder>}
 */
Pivot.Builder = class extends proto_im_InternalMessage.Builder {
  /**
   * @param {!Pivot} message
   * @private
   */
  constructor(message) {
    super(message);
  }

  /**
   * @return {boolean}
   */
  hasPayload() {
    return this.message.hasPayload();
  }

  /**
   *
   * @return {!string}
   */
  getPayload() {
    return this.message.getPayload();
  }

  /**
   *
   * @param {!string} value
   * @return {!Pivot.Builder}
   */
  setPayload(value) {
    return this.internal_setStringField(1, value);
  }

  /**
   * @return {!Pivot.Builder}
   */
  clearPayload() {
    return this.internal_clearField(1);
  }
}



exports = Pivot;
