## Copyright 2019 Google LLC
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
## http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.

##
## Renders an enum with its standard methods
##
#if ($enumDescriptor.isTopLevelClass())
package $enumDescriptor.package;

#end

#if ($enumDescriptor.isJsEnum())
  #set ($maybeJsOverlay = "@jsinterop.annotations.JsOverlay")

  @jsinterop.annotations.JsEnum(isNative = true, name = "$enumDescriptor.jsName", namespace = "$enumDescriptor.jsNameSpace", hasCustomValue = true)
  public enum $enumDescriptor.name {

  #foreach($value in $enumDescriptor.values)
    ${value.name}#if ($foreach.hasNext),#else;#end
  #end

  $maybeJsOverlay
  public static final $enumDescriptor.name forNumber(int i) {
    return jsinterop.base.Js.uncheckedCast((double) i);
  }

#else
  #set ($maybeJsOverlay = "")

  public enum $enumDescriptor.name implements com.google.protobuf.ProtocolMessageEnum {

  #foreach($value in $enumDescriptor.values)
    ${value.name}(${value.number})#if ($foreach.hasNext),#else;#end
  #end

  ${enumDescriptor.name}(int value) {
      this.value = value;
  }

  #if ($enumDescriptor.isDense())
    private static ${enumDescriptor.getName()}[] cachedValues;
  #end
  public static final $enumDescriptor.name forNumber(int i) {
  #if ($enumDescriptor.isDense())
    if (cachedValues == null) {
      cachedValues = values();
    }
    return cachedValues[i];
  #else
    switch(i) {
    #foreach($value in $enumDescriptor.values)
      #if (!$value.isAlias())
        case $value.number: return $value.name;
      #end
    #end
    }
    return null;
  #end
  }

#end

  private int value;

  $maybeJsOverlay
  public final int getNumber() {
    return value;
  }

  #foreach ($value in $enumDescriptor.values)
    $maybeJsOverlay
    public static final int ${value.name}_VALUE = $value.number;
  #end

  // DO NOT REFER TO FROM NON GENERATED CODE! SUBJECT TO CHANGE!
  // Native closure enum representation
  @jsinterop.annotations.JsType(isNative = true, name = "$enumDescriptor.jsName", namespace = "$enumDescriptor.jsNameSpace")
  public static final class Internal_ClosureEnum {
    @jsinterop.annotations.JsOverlay
    public static final Internal_ClosureEnum toClosureValue($enumDescriptor.name enumInstance) {
      return jsinterop.base.Js.uncheckedCast((double) enumInstance.getNumber());
    }

    @jsinterop.annotations.JsOverlay
    public static final $enumDescriptor.name toEnum(Object closureEnum) {
    #if ($enumDescriptor.isJsEnum())
      return jsinterop.base.Js.uncheckedCast(closureEnum);
    #else
      int i = jsinterop.base.Js.asInt(closureEnum);
      $enumDescriptor.name value = ${enumDescriptor.name}.forNumber(i);
      return value == null ? $enumDescriptor.values.get(0).name : value;
    #end
    }
  }
}
