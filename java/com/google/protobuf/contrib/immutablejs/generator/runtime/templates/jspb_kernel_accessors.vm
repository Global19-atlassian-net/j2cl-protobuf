#foreach ($type in $primitiveTypes)
#set ($valueType = $type.expression)
#set ($stem = $type.target().stem)

  //////////////////////////////////////////////////////////////////////////////
  //
  // ${stem} accessors start
  //
  //////////////////////////////////////////////////////////////////////////////

  /**
   * @param {number} fieldNumber
   * @return {!${valueType}}
   */
  get${stem}Field(fieldNumber) {
    return this.getField_(fieldNumber, FieldAccessor.get${stem});
  }

  /**
   * @param {number} fieldNumber
   * @param {!${valueType}} defaultValue
   * @return {!${valueType}}
   */
  get${stem}FieldWithDefault(fieldNumber, defaultValue) {
    return this.getFieldWithDefault_(
        fieldNumber, defaultValue, FieldAccessor.get${stem}WithDefault);
  }

  /**
   * @param {number} fieldNumber
   * @return {!ListView<!${valueType}>}
   */
  getRepeated${stem}Field(fieldNumber) {
    return this.getRepeatedField_(fieldNumber, FieldAccessor.get${stem});
  }

  /**
   * @param {number} fieldNumber
   * @param {number} elementIndex
   * @return {!${valueType}}
   */
  get${stem}Element(fieldNumber, elementIndex) {
    return this.getElement_(
        fieldNumber, elementIndex, FieldAccessor.get${stem});
  }

  //////////////////////////////////////////////////////////////////////////////
  //
  // ${stem} accessors stop
  //
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  //
  // ${stem} accessors for builder start
  //
  //////////////////////////////////////////////////////////////////////////////

  /**
   * @param {number} fieldNumber
   * @param {!${valueType}} value
   */
  add${stem}Element(fieldNumber, value) {
    this.addElement_(fieldNumber, value, FieldAccessor.set${stem});
  }

  /**
   * @param {number} fieldNumber
   * @param {!Iterable<!${valueType}>} values
   */
  addAll${stem}Elements(fieldNumber, values) {
    this.addAllElements_(fieldNumber, values, FieldAccessor.set${stem});
  }


  /**
   * @param {number} fieldNumber
   * @param {!${valueType}} value
   */
  set${stem}Field(fieldNumber, value) {
    this.setField_(fieldNumber, value, FieldAccessor.set${stem});
  }


  /**
   * @param {number} fieldNumber
   * @param {!Iterable<!${valueType}>} values
   */
  set${stem}Iterable(fieldNumber, values) {
    this.setIterable_(fieldNumber, values, FieldAccessor.set${stem});
  }


  /**
   * @param {number} fieldNumber
   * @param {number} elementIndex
   * @param {!${valueType}} value
   */
  set${stem}Element(fieldNumber, elementIndex, value) {
    this.setElement_(
        fieldNumber, elementIndex, value, FieldAccessor.set${stem});
  }


  //////////////////////////////////////////////////////////////////////////////
  //
  // ${stem} accessors for builder stop
  //
  //////////////////////////////////////////////////////////////////////////////

#end

  //////////////////////////////////////////////////////////////////////////////
  //
  // Message accessors start
  //
  //////////////////////////////////////////////////////////////////////////////

  /**
   * @param {number} fieldNumber
   * @param {function(new:T, !Array<*>)} ctor
   * @template T
   * @return {T}
   */
  getMessageField(fieldNumber, ctor) {
    const instanceCreator = data => JspbKernel.fromArray(ctor, data);
    return this.getField_(
        fieldNumber, (a, i) => FieldAccessor.getMessage(a, i, instanceCreator));
  }

  /**
   * @param {number} fieldNumber
   * @param {function(new:T, !Array<*>)} ctor
   * @template T
   * @return {!ListView<T>}
   */
  getRepeatedMessageField(fieldNumber, ctor) {
    const instanceCreator = data => JspbKernel.fromArray(ctor, data);
    return this.getRepeatedField_(
        fieldNumber, (a, i) => FieldAccessor.getMessage(a, i, instanceCreator));
  }

  /**
   * @param {number} fieldNumber
   * @param {number} elementIndex
   * @param {function(new:T, !Array<*>)} ctor
   * @template T
   * @return {T}
   */
  getMessageElement(fieldNumber, elementIndex, ctor) {
    const instanceCreator = data => JspbKernel.fromArray(ctor, data);
    return this.getElement_(
        fieldNumber, elementIndex,
        (a, i) => FieldAccessor.getMessage(a, i, instanceCreator));
  }

  //////////////////////////////////////////////////////////////////////////////
  //
  // Message accessors stop
  //
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  //
  // Message accessors for builder start
  //
  //////////////////////////////////////////////////////////////////////////////

  /**
   * @param {number} fieldNumber
   * @param {!JspbKernel} value
   */
  addMessageElement(fieldNumber, value) {
    this.addElement_(fieldNumber, value, messageFieldWriter);
  }

  /**
   * @param {number} fieldNumber
   * @param {!JspbKernel} value
   */
  setMessageField(fieldNumber, value) {
    this.setField_(fieldNumber, value, messageFieldWriter);
  }


  /**
   * @param {number} fieldNumber
   * @param {number} elementIndex
   * @param {!JspbKernel} value
   */
  setMessageElement(fieldNumber, elementIndex, value) {
    this.setElement_(fieldNumber, elementIndex, value, messageFieldWriter);
  }

  /**
   * @param {number} fieldNumber
   * @param {!Iterable<!JspbKernel>} values
   */
  setMessageIterable(fieldNumber, values) {
    this.setIterable_(fieldNumber, values, messageFieldWriter);
  }

  //////////////////////////////////////////////////////////////////////////////
  //
  // Message accessors for builder stop
  //
  //////////////////////////////////////////////////////////////////////////////
